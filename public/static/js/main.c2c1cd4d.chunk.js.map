{"version":3,"sources":["components/Loader/Loader.jsx","components/ChartArtists/ChartArtistsItem.jsx","components/ChartArtists/ChartArtistsList.jsx","components/ChartArtists/ChartArtists.jsx","components/SearchForm/SearchForm.jsx","components/ArtistSearch/ArtistSearch.jsx","components/Home/Home.jsx","components/ArtistTopTracks/TrackItem.jsx","components/ArtistTopTracks/ArtistTopTracks.jsx","components/ArtistAlbums/ArtistAlbums.jsx","components/ArtistComments/ArtistComments.jsx","components/SingleArtist/SingleArtistDetails.jsx","components/SingleArtist/SingleArtist.jsx","components/SingleAlbum/AlbumTrack.jsx","components/SingleAlbum/SingleAlbum.jsx","App.js","index.js"],"names":["Loader","className","ChartArtistsItem","artist","id","position","picture_big","name","key","to","src","alt","ChartArtistList","chartArtists","data","map","ChartArtists","CHART_ARTISTS_QUERY","gql","useQuery","loading","SearchForm","searchByArtist","useState","userQuery","setUserQuery","onSubmit","event","preventDefault","noSpacesQuery","split","join","type","value","onChange","target","placeholder","required","ArtistSearch","setArtist","ARTIST_QUERY","query","Home","TrackItem","topArtistTracks","track","title_short","preview","contributors","title","frameBorder","length","contributor","index","ArtistTopTracks","artist_id","ARTIST_TOP_TRACKS_QUERY","ArtistAlbums","ALBUMS_QUERY","artistAlbums","album","cover_medium","style","textDecoration","color","ArtistComments","ARTIST_COMMENTS_QUERY","artistComments","comment","text","SingleArtistDetails","ArtistPage","AlbumTrack","albumTracks","track_position","margin","padding","border","width","height","SingleAlbum","album_id","ALBUM_TRACKS_QUERY","App","primary","path","SingleArtist","httpLink","createHttpLink","uri","cache","InMemoryCache","client","ApolloClient","link","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c2c1cd4d.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./Loader.css\";\n\nconst Loader = () => {\n  return (\n    <div className=\"loadingio-spinner-cube-a1drmf4bq2\">\n      <div className=\"ldio-b5x4q7m52cr\">\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Loader;\n","import React from \"react\";\nimport { Link } from \"@reach/router\";\n\nconst ChartArtistsItem = ({ artist: { id, position, picture_big, name } }) => {\n  return (\n    <li key={id}>\n      <h2>{position}</h2>\n      <Link to={`/artist/${id}`}>\n        <img src={picture_big} alt=\"Artist cover\" />\n      </Link>\n      <h1>{name}</h1>\n    </li>\n  );\n};\n\nexport default ChartArtistsItem;\n","import React from \"react\";\n\nimport \"./ChartArtistsList.css\";\nimport ChartArtistsItem from \"./ChartArtistsItem\";\n\nconst ChartArtistList = ({ data: { chartArtists } }) => {\n  return (\n    <section>\n      <ul className=\"chart-list\">\n        {chartArtists.map(artist => {\n          const { id } = artist;\n          return <ChartArtistsItem key={id} artist={artist} />;\n        })}\n      </ul>\n    </section>\n  );\n};\n\nexport default ChartArtistList;\n","import React from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"@apollo/react-hooks\";\n\nimport Loader from \"../Loader/Loader\";\nimport ChartArtistsList from \"./ChartArtistsList\";\n\nconst ChartArtists = () => {\n  const CHART_ARTISTS_QUERY = gql`\n    query chartArtistsQuery {\n      chartArtists {\n        id\n        name\n        picture_big\n        position\n      }\n    }\n  `;\n\n  const { loading, data } = useQuery(CHART_ARTISTS_QUERY);\n\n  return loading ? <Loader /> : <ChartArtistsList data={data} />;\n};\n\nexport default ChartArtists;\n","import React, { useState } from \"react\";\n\nimport \"./SearchForm.css\";\n\nconst SearchForm = ({ searchByArtist }) => {\n  const [userQuery, setUserQuery] = useState(\"\");\n\n  const onSubmit = event => {\n    event.preventDefault();\n    const noSpacesQuery = userQuery.split(\" \").join(\"\");\n    searchByArtist(noSpacesQuery);\n    setUserQuery(\"\");\n  };\n\n  return (\n    <section className=\"search-form\">\n      <form onSubmit={onSubmit}>\n        <div>\n          <input\n            type=\"text\"\n            name=\"userInput\"\n            value={userQuery}\n            onChange={event => setUserQuery(event.target.value)}\n            placeholder=\"Search\"\n            required\n          />\n          <button>\n            <i className=\"fas fa-search\"></i>\n          </button>\n        </div>\n      </form>\n    </section>\n  );\n};\n\nexport default SearchForm;\n","import React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport { Link } from \"@reach/router\";\n\nimport Loader from \"../Loader/Loader\";\nimport SearchForm from \"../SearchForm/SearchForm\";\nimport \"./ArtistSearch.css\";\n\nconst ArtistSearch = () => {\n  const [artist, setArtist] = useState(\"\");\n\n  const ARTIST_QUERY = gql`\n    query artistQuery {\n      artist(name: \"${artist}\") {\n        name\n        id\n        picture_big\n      }\n    }\n  `;\n\n  const { loading, data } = useQuery(ARTIST_QUERY);\n\n  if (loading) return <Loader />;\n\n  const { name, picture_big, id } = data.artist;\n\n  return (\n    <>\n      <SearchForm searchByArtist={query => setArtist(query)} />\n      <section className=\"artist-search-display\">\n        {picture_big ? (\n          <Link to={`/artist/${id}`}>\n            <img src={picture_big} alt=\"Artist cover\" />\n          </Link>\n        ) : null}\n        <h1>{name}</h1>\n      </section>\n    </>\n  );\n};\n\nexport default ArtistSearch;\n","import React from \"react\";\n\nimport ChartArtists from \"../ChartArtists/ChartArtists\";\nimport ArtistSearch from \"../ArtistSearch/ArtistSearch\";\n\nconst Home = () => {\n  return (\n    <main>\n      <ChartArtists />\n      <ArtistSearch />\n    </main>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\n\nimport \"./TrackItem.css\";\n\nconst TrackItem = ({ data: { topArtistTracks } }) => {\n  return (\n    <div className=\"track-item-container\">\n      <h2>Top Tracks</h2>\n      <ul>\n        {topArtistTracks.map(track => {\n          const { title_short, preview, contributors } = track;\n          return (\n            <li key={title_short}>\n              <h3>{title_short}</h3>\n              <iframe\n                title={title_short}\n                frameBorder=\"0\"\n                src={preview}\n              ></iframe>\n              {contributors.length > 3 ? (\n                <h4>{contributors[0].name}</h4>\n              ) : (\n                contributors.map((contributor, index) => {\n                  const { name } = contributor;\n                  return <h4 key={index}>{name}</h4>;\n                })\n              )}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default TrackItem;\n","import React from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"@apollo/react-hooks\";\n\nimport Loader from \"../Loader/Loader\";\nimport TrackItem from \"./TrackItem\";\n\nconst ArtistTopTracks = ({ artist_id }) => {\n  const ARTIST_TOP_TRACKS_QUERY = gql`\n  query artistTopTracksQuery {\n    topArtistTracks(id: \"${artist_id}\") {\n      title_short\n      preview\n      contributors {\n        name\n      }\n    }\n  }\n  `;\n\n  const { loading, data } = useQuery(ARTIST_TOP_TRACKS_QUERY);\n\n  return loading ? <Loader /> : <TrackItem data={data} />;\n};\n\nexport default ArtistTopTracks;\n","import React from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { Link } from \"@reach/router\";\n\nimport \"./ArtistAlbums.css\";\nimport Loader from \"../Loader/Loader\";\n\nconst ArtistAlbums = ({ artist_id }) => {\n  const ALBUMS_QUERY = gql`\n  query albumsQuery {\n    artistAlbums(id: \"${artist_id}\") {\n      id\n      title\n      cover_medium\n    }\n  }\n  `;\n\n  const { loading, data } = useQuery(ALBUMS_QUERY);\n\n  if (loading) return <Loader />;\n\n  const { artistAlbums } = data;\n\n  return (\n    <ul className=\"albums-list\">\n      {artistAlbums.map(album => {\n        const { id, title, cover_medium } = album;\n        return (\n          <li key={id}>\n            <img src={cover_medium} alt=\"Album cover\" />\n            <Link\n              to={`/album/${id}`}\n              style={{ textDecoration: \"none\", color: \"grey\" }}\n            >\n              <h3>{title}</h3>\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default ArtistAlbums;\n","import React from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"@apollo/react-hooks\";\n\nimport Loader from \"../Loader/Loader\";\nimport \"./ArtistComments.css\";\n\nconst ArtistComments = ({ artist_id }) => {\n  const ARTIST_COMMENTS_QUERY = gql`\n  query artistCommentsQuery {\n    artistComments(id: \"${artist_id}\") {\n      text\n      id\n    }\n  }\n  `;\n\n  const { loading, data } = useQuery(ARTIST_COMMENTS_QUERY);\n\n  return loading ? (\n    <Loader />\n  ) : (\n    <ul className=\"artist-comments\">\n      {data.artistComments.map(comment => {\n        const { text, id } = comment;\n        return (\n          <li key={id}>\n            <p>{`\" ${text} \"`}</p>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default ArtistComments;\n","import React from \"react\";\nimport { Link } from \"@reach/router\";\n\nimport \"./SingleArtistDetails.css\";\nimport ArtistTopTracks from \"../ArtistTopTracks/ArtistTopTracks\";\nimport ArtistAlbums from \"../ArtistAlbums/ArtistAlbums\";\nimport ArtistComments from \"../ArtistComments/ArtistComments\";\n\nconst SingleArtistDetails = ({\n  data: {\n    artist: { name, picture_big }\n  },\n  artist_id\n}) => {\n  return (\n    <main className=\"single-artist-container\">\n      <section className=\"single-artist-bio\">\n        <h1>{name}</h1>\n        <img src={picture_big} alt=\"Artist cover\" />\n        <Link to=\"/\">\n          <button>Back</button>\n        </Link>\n      </section>\n      <section className=\"single-artist-tracks\">\n        <ArtistTopTracks artist_id={artist_id} />\n      </section>\n      <section className=\"single-artist-albums\">\n        <ArtistAlbums artist_id={artist_id} />\n      </section>\n      <section className=\"single-artist-comments\">\n        <ArtistComments artist_id={artist_id} />\n      </section>\n    </main>\n  );\n};\n\nexport default SingleArtistDetails;\n","import React from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"@apollo/react-hooks\";\n\nimport Loader from \"../Loader/Loader\";\nimport SingleArtistDetails from \"./SingleArtistDetails\";\n\nconst ArtistPage = ({ artist_id }) => {\n  const ARTIST_QUERY = gql`\n    query artistQuery {\n      artist(name: \"${artist_id}\") {\n       name\n       picture_big\n   }\n }\n `;\n\n  const { loading, data } = useQuery(ARTIST_QUERY);\n\n  return loading ? (\n    <Loader />\n  ) : (\n    <SingleArtistDetails data={data} artist_id={artist_id} />\n  );\n};\n\nexport default ArtistPage;\n","import React from \"react\";\nimport { Link } from \"@reach/router\";\n\nimport \"./AlbumTrack.css\";\n\nconst AlbumTrack = ({ data: { albumTracks } }) => {\n  return (\n    <main className=\"album-track-container\">\n      <ul>\n        <Link to={`/artist/${albumTracks[0].artist.id}`}>\n          <button>Back</button>\n        </Link>\n        {albumTracks.map(track => {\n          const { id, title_short, track_position, preview } = track;\n          return (\n            <li key={id} className=\"single-album-list\">\n              <h1>\n                {track_position} : {title_short}\n              </h1>\n              <iframe\n                title={title_short}\n                frameBorder=\"0\"\n                src={preview}\n                style={{\n                  margin: \"0\",\n                  padding: \"0.5rem\",\n                  border: \"none\",\n                  width: \"200px\",\n                  height: \"100px\"\n                }}\n              ></iframe>\n            </li>\n          );\n        })}\n      </ul>\n    </main>\n  );\n};\n\nexport default AlbumTrack;\n","import React from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"@apollo/react-hooks\";\n\nimport AlbumTrack from \"./AlbumTrack\";\nimport Loader from \"../Loader/Loader\";\n\nconst SingleAlbum = ({ album_id }) => {\n  const ALBUM_TRACKS_QUERY = gql`\n  query albumTracksQuery {\n    albumTracks(id: ${album_id}) {\n      id\n      title_short\n      track_position\n      preview\n      artist {\n        id\n      }\n    }\n  }\n  `;\n\n  const { loading, data } = useQuery(ALBUM_TRACKS_QUERY);\n\n  return loading ? <Loader /> : <AlbumTrack data={data} />;\n};\n\nexport default SingleAlbum;\n","import React from \"react\";\nimport { Router } from \"@reach/router\";\n\nimport \"./App.css\";\nimport Home from \"./components/Home/Home\";\nimport SingleArtist from \"./components/SingleArtist/SingleArtist\";\nimport SingleAlbum from \"./components/SingleAlbum/SingleAlbum\";\n\nfunction App() {\n  return (\n    <>\n      <Router primary={false}>\n        <Home path=\"/\" />\n        <SingleArtist path=\"/artist/:artist_id\" />\n        <SingleAlbum path=\"/album/:album_id\" />\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport { ApolloClient } from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nconst httpLink = createHttpLink({\n  uri: \"/graphql\"\n});\n\nconst cache = new InMemoryCache();\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}